apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: flow-with-simple-cron
spec:
  # schedule defines how the job repeats, it uses the same syntax as the linux crontab syntax, 
  # the five star is in order of [Minute] [Hour] [Day_of_the_Month] [Month_of_the_Year] [Day_of_the_Week],
  # Note in the new linux release, you can add an optional six star to fefine year.
  # 1: */2 means every two mins. If you want every min after 6 min, you write 6/1. 8/2 means every 2 min after 8 min
  # As a result, the two numbers must in range of [0,59]
  # 2: For hours, the two numbers must in range of [0,23]
  # 3: For day of the month, the two numbers must in range of [1,31] 
  # 4: For month of year, the two numbers must in range of [1,12]
  # For day of the week, the two number must in range of [0,7], where 0 and 7 means Sunday
  # "* * * * *" means the job will be running every second, every min, every hour, every
  schedule: "*/3 * * * *"
  # if the job is long to finish, the schedule may start a new job without finishing the old one. Thus you need to set a policy to allow concurrency or
  # not.
  # It has three possible values
  # - "Allow" (default). 
  # - "Forbid" Ignore the new schedule job until the old job finishes
  # - "Replace" The new schedule job replaces the unfinish old job
  concurrencyPolicy: "Replace"
  # It stands for the deadline in seconds for starting the job if it misses its scheduled time for any reason. After the deadline, 
  # the cron job does not start the job. Jobs that do not meet their deadline in this way count as failed jobs. 
  # If this field is not specified, the jobs have no deadline.

  # For example, if a CronWorkflow that runs every minute is last run at 12:05:00, and the controller crashes between 12:05:55 
  # and 12:06:05, then the expected execution time of 12:06:00 would be missed. However, if startingDeadlineSeconds is set to a 
  # value greater than 65 (the amount of time passing between the last scheduled run time of 12:05:00 and the current controller 
  # restart time of 12:06:05), then a single instance of the CronWorkflow will be executed exactly at 12:06:05.
  # Currently only a single instance will be executed as a result of setting startingDeadlineSeconds.
  startingDeadlineSeconds: 120
  # the number of successful job which will be saved, default value is 3.
  successfulJobsHistoryLimit: 4
  # set the controller to save the number of failed jobs, default valie is 1
  failedJobsHistoryLimit: 2
  # Default to local machine timezone
  timezone: "America/Los_Angeles"   
  # Suspend your workflow is set to false by default
  suspend: false
  workflowSpec:
    entrypoint: whalesay
    templates:
    - name: whalesay
      container:
        image: alpine:3.6
        command: [sh, -c]
        args: ["date; sleep 90"]

# To run a cron workflow you need the following command. Note that the old argo client does not support this command, you need to download a recent one
# $ argo cron create path/to/your/cron.yaml
# 
# To list all cron workflow 
# $ argo cron list
#
# Get details of a cron workflow
# argo cron get test-cron-wf
# 
# If you don't have argo client, you can also use kubectl
# kubectl apply -f path/to/your/cron.yaml
# 
# To list all cron workflow 
# kubectl get cwf