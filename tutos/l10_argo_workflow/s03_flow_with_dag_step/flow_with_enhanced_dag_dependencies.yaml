# In classic dag manifest, we use keyword "dependencies" to specify the task dependencies.
# But it does not allow the user to specify which result of the task to depend on. For example, a task may only be
# relevant to run if the dependent task succeeded (or failed, etc.).
#
# Now we can use keyword "depends", which allows users to specify not only dependent tasks, but also their statuses,
# as well as any complex boolean logic (&&,||,!). The field is a string field and the syntax is expression-like with
#  operands having form <task-name>.<task-status>. The full list of available task status is as follows:
# -.Succeeded :	Task Succeeded
# -.Failed : Task Failed
# -.Errored : Task Errored
# -.Skipped : Task Skipped
# -.Daemoned : Task is Daemoned and is not Pending, this only works for the template with "daemon: true"

# For example (!task-1.Suceeded && task-2.Failed) || task-3.Damenoed.

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: flow-with-enhanced-dag-dependencies-
spec:
  entrypoint: main
  templates:
  - name: worker
    inputs:
      parameters:
      - name: id
    script:
      image: docker/whalesay:latest
      command:
        - bash
        - -eux
      source: |
        echo "This is worker-{{inputs.parameters.id}}"
        # toss a virtual coin and exit 1 if 1
        if [ $(($(($RANDOM%10))%2)) -eq 1 ]; then
          echo "job failed!"
           exit 1
        fi
        echo "job succeded!"
   # The master template defines the tasks and their relationships.    
  - name: main
    dag:
      tasks:
      # A task needs to use another template to run
      - name: task-A
      # indicate the name of the template which will run the task
        template: worker
      # the parameters which will be used on the template  
        arguments:
          parameters:
          - name: id
            value: task_A
      - name: task-preB
        template: worker
        arguments:
          parameters: [{name: id,value: task_preB}]
      # task B runs if task A is finished correctly (succeeded,skipped,daemoned) or task-preB succeeded
      - name: task-B
        # task-A without status means the current task will start only if the dependent task finished correctly.
        # so, task-A is equivalent to (task-A.Succeeded || task-A.Skipped || task-A.Daemoned)
        depends: "task-A || task-preB.Succeeded"
        template: worker
        arguments:
          parameters: [{name: id,value: task_B}]
      # task C runs if task B succeeded
      - name: task-C
        depends: task-B.Succeeded
        template: worker
        arguments:
          parameters: [{name: id,value: task_C}]
      # task D runs if task B failed
      - name: task-D
        depends: task-B.Failed
        template: worker
        arguments:
          parameters: [{name: id,value: task_D}]

# The equivalence between depends and dependencies:
# dependencies: ["A", "B", "C"]  is equivalent to depends: "A && B && C"