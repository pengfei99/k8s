# Argo supports the same secrets syntax and mechanisms as Kubernetes Pod specs, 
# which allows access to secrets as environment variables or volume mounts.

# To run this example, first you need to create a secret. 
# You can use the following example to generate a simple secret. But we want two key-value pair in a secret
# kubectl create secret generic my-secret --from-literal=mypassword=S00perS3cretPa55word
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: flow-with-secret-
spec:
  entrypoint: show-secret
  # To access secrets as files, add a volume entry in spec.volumes[] and
  # then in the container template spec, add a mount using volumeMounts.
  volumes:
  - name: my-secret-vol
    secret:
      secretName: dev-minio-cred     # name of an existing k8s secret
  templates:
  - name: show-secret
    container:
      image: alpine:3.7
      command: [sh, -c]
      args: ['
        echo "secret from env: $MYSECRETPASSWORD";
        echo "secret dir: `ls /mnt/secret/`";
        echo "secret from file: `cat /mnt/secret/secretKey`"
      ']
      # To access secrets as environment variables, use the k8s valueFrom and
      # secretKeyRef constructs.
      env:
      - name: MYSECRETPASSWORD  # name of env var
        valueFrom:
          secretKeyRef:
            name: dev-minio-cred    # name of an existing k8s secret
            key: secretKey     # 'key' subcomponent of the secret
      # note all key-value paires in secret is presented as files
      # for example, in my secret, I have two key-value pairs(accessKey, secretKey)
      # It will generate two files accessKey and secretKey under the mount path /mnt/secret 
      volumeMounts:
      - name: my-secret-vol     # mount file containing secret at /secret/mountpath
        mountPath: "/mnt/secret/"