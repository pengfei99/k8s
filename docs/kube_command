https://kubernetes.io/docs/reference/kubectl/cheatsheet/


################################### resource creation (pods, services)#############################################

# install a pod/service by using a config file
kubectl apply -f deployment.yml
kubectl apply -f service.yml
kubectl apply -f .

################################### restart a deployment ####################################################
kubectl rollout restart deployment.apps/opa -n opa

################################## view existing resource #######################################

# get all deployed pods
kubectl get pods

# get all pods with details
kubectl get pods -n user-pengfei -o wide

# get details of a pod
kubectl describe pods <pods_name>

# get logs of a pod
kubectl logs <pods_name>

# get services
kubectl get services/svc

################################### Deleting existing resource #################################

# delete a pod/service by using a config file
kubectl delete -f deployment.yml
kubectl delete -f service.yml

################################## Persistent volume claim #####################################

# get persistent volume claim list 
kubectl get pvc -n user-pengfei

# describe a persistent volume claim
kubectl describe pvc data-pengfei-airflow-postgresql-0

# delete all pvc 
kubectl delete pvc --all
kubectl delete pvc -l app=myapp

# delete one pvc
kubectl delete pvc <pvc-name>

######################################### Get secret ##############################################

# get secret
kubectl get secret

# get db password from a secret
kubectl get secret --namespace user-pengfei pengfei-airflow-postgresql -o jsonpath="{.data.postgresql-password}" | base64 --decode

# get redis password
kubectl get secret --namespace user-pengfei pengfei-airflow-redis -o jsonpath="{.data.redis-password}" | base64 --decode

##################################### Get a pod shell ###########################################
# if your pod has only one container, this will get a shell of that container. If your pod has multiple contianer, it will get the default container's shell
# here pengfei-airflow-web is the name of the pod
kubectl exec --stdin --tty pengfei-airflow-web -- /bin/bash

# if you want to get a specific containter of your pod, you can use the following command.
# here pod-with-empty-dir is the name of the pod, reader-container is the name of the container
kubectl exec --stdin --tty pod-with-empty-dir --container reader-container -- /bin/sh

################################### port forward a servcie to localhost ########################

kubectl port-forward --namespace user-pengfei svc/pengfei-airflow 8080:8080
# The first port number(80) is the port of the service. The second port number(8080) is the port forward on your local machine
kubectl port-forward --namespace user-pengfei svc/static-web-service 80:8080
kubectl port-forward --namespace user-pengfei svc/pengfei-airflow-postgresql 5432:5432

kubectl port-forward --namespace user-pengfei svc/argo-artifacts 9000:9000
################################### Ingress #################################################
# show short ingress description
kubectl get ingress

# show detailed ingress description
kubectl describe ingress



################################# Config map #################################################

# create a config map from a directory of files
kubectl create configmap dags-configmap --from-file=dags/

# list all exsiting config map
kubectl get configmap

# describe an existing configmap
kubectl describe configmaps dags-configmap

# export a config map in yml format
kubectl get configmaps dags-configmap -o yaml



################################# secret ########################################

# get scecret list
kubectl get secrets -n argo


################################# role and rolebinding ###################################
# get all role
kubectl get roles -a


# get all rolebinding
kubectl get rolebinding -A

# get role/rolebinding of a namespace
kubectl get roles/rolebinding -n user-pengfei

kubectl describe roles

############################## pod debug tools ###################################
kubectl alpha debug -it pengfei-airflow-web-798ff4f645-64kjx --image=busybox --target=pengfei-airflow-web-798ff4f645-64kjx
kubectl alpha debug -it pengfei-airflow-web-5b67b6b79c-6d7zc --image=busybox --target=pengfei-airflow-web-5b67b6b79c-6d7zc

############################## get events  ###################################
# this will return some k8s api server message like unvalid env var in a pod is skipped
kubectl get events


############################## kube argo workflow ###############################
# get list of workflow run by argo
kubectl get workflow

# get details of a workflow
kubectl describe workflow <work-flow-name>

# apply a workflow by using a yaml file which describe the workflow dags
kubectl apply -f example/workflow-hello.yaml 


################################ Run pod as interactive shell #############################
# run a pod and get an interactive shell in a namespace
kubectl run -i --tty busybox --image=busybox --restart=Never -- sh -n user-pengfei
kubectl run --rm utils -it --image eddiehale/utils --restart=Never bash 
# if you want to output the generated spec to a file
kubectl run -i --tty busybox --image=busybox --restart=Never -- sh -n user-pengfei --dry-run -o yaml > pod.yaml

############################## Edit a resource en live ####################################
# We can edit a resource en live (e.g. pod, deployment, etc.)
# Solution 1 use kubectl edit deployment/<deployment-name>
kubectl edit deployment/jupyter-1623939817
# The above will open an editor to allow you to modify the deployment spec

# Solution 2 use kubectl patch deployment <deployment-name> -p <path-content>. The <path-content> can be in json or yaml format
# Following example modify the deployment container image 
kubectl patch depolyment jupyter-1623939817 -p   '{"spec":{"template":{"spec":{"containers":[{"name":"myapp","image":"my-img-repo/myapp:img:3.0"}]}}}}'

## Note the above two solution will both kill your old pod and lanch new ones with new config, all unsaved data in the old pod will be lost 

########################## Suspend a k8s cronjob #########################################

kubectl patch cronjobs <job-name> -p '{"spec" : {"suspend" : true }}'
