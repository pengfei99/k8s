https://kubernetes.io/docs/reference/kubectl/cheatsheet/

################################### resource creation (pods, services)#############################################

# install a pod/service by using a config file
kubectl apply -f deployment.yml
kubectl apply -f service.yml
kubectl apply -f .

################################## view existing resource #######################################

# get all deployed pods
kubectl get pods

# get all pods with details
kubectl get pods -n user-pengfei -o wide

# get details of a pod
kubectl describe pods <pods_name>

# get logs of a pod
kubectl logs <pods_name>

# get services
kubectl get services/svc

################################### Deleting existing resource #################################

# delete a pod/service by using a config file
kubectl delete -f deployment.yml
kubectl delete -f service.yml

################################## Persistent volume claim #####################################

# get persistent volume claim list 
kubectl get pvc -n user-pengfei

# describe a persistent volume claim
kubectl describe pvc data-pengfei-airflow-postgresql-0

# delete all pvc 
kubectl delete pvc --all
kubectl delete pvc -l app=myapp

# delete one pvc
kubectl delete pvc <pvc-name>

######################################### Get secret ##############################################

# get secret
kubectl get secret

# get db password from a secret
kubectl get secret --namespace user-pengfei pengfei-airflow-postgresql -o jsonpath="{.data.postgresql-password}" | base64 --decode

# get redis password
kubectl get secret --namespace user-pengfei pengfei-airflow-redis -o jsonpath="{.data.redis-password}" | base64 --decode

##################################### Get a pod shell ###########################################
kubectl exec --stdin --tty pengfei-airflow-web-798ff4f645-fffqq -- /bin/bash

################################### port forward a servcie to localhost ########################

kubectl port-forward --namespace user-pengfei svc/pengfei-airflow 8080:8080
kubectl port-forward --namespace user-pengfei svc/pengfei-airflow-postgresql 5432:5432

kubectl port-forward --namespace user-pengfei svc/argo-artifacts 9000:9000
################################### Ingress #################################################
# show short ingress description
kubectl get ingress

# show detailed ingress description
kubectl describe ingress




################################# Config map #################################################

# create a config map from a directory of files
kubectl create configmap dags-configmap --from-file=dags/

# list all exsiting config map
kubectl get configmap

# describe an existing configmap
kubectl describe configmaps dags-configmap

# export a config map in yml format
kubectl get configmaps dags-configmap -o yaml



################################# secret ########################################

# get scecret list
kubectl get secrets -n argo


################################# role and rolebinding ###################################
# get all role
kubectl get roles -a


# get all rolebinding
kubectl get rolebinding -A

# get role/rolebinding of a namespace
kubectl get roles/rolebinding -n user-pengfei

kubectl describe roles

############################## pod debug tools ###################################
kubectl alpha debug -it pengfei-airflow-web-798ff4f645-64kjx --image=busybox --target=pengfei-airflow-web-798ff4f645-64kjx
kubectl alpha debug -it pengfei-airflow-web-5b67b6b79c-6d7zc --image=busybox --target=pengfei-airflow-web-5b67b6b79c-6d7zc

############################## get events  ###################################
# this will return some k8s api server message like unvalid env var in a pod is skipped
kubectl get events


############################## kube argo workflow ###############################
# get list of workflow run by argo
kubectl get workflow

# get details of a workflow
kubectl describe workflow <work-flow-name>

# apply a workflow by using a yaml file which describe the workflow dags
kubectl apply -f example/workflow-hello.yaml 


